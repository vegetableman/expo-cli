{"version":3,"file":"withUnimodules.js","sourceRoot":"","sources":["../src/withUnimodules.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,kEAAkC;AAClC,gDAAwB;AAGxB,6DAA+C;AAC/C,+CAAuD;AACvD,6CAAiE;AACjE,4FAAwD;AAExD,SAAS,gBAAgB,CAAC,KAAoB;IAC5C,MAAM,MAAM,GAAG,oBAAU,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IACjD,IAAI,CAAC,MAAM;QACT,MAAM,IAAI,KAAK,CACb,iKAAiK,CAClK,CAAC;IACJ,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,iEAAiE;AACjE,yDAAyD;AACzD,SAAwB,cAAc,CACpC,qBAAuD,EAAE,EACzD,MAAwB,EAAE,EAC1B,OAAkB,EAAE;IAEpB,0HAA0H;IAC1H,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,IAAI,kBAAkB,CAAC,OAAO,CAAC;IAEhE,+CAA+C;IAC/C,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,kBAAkB,CAAC,IAAI,CAAC;IAE/C,MAAM,WAAW,GAAgB,8BAAmB,CAAC,GAAG,CAAC,CAAC;IAE1D,IAAI,EAAE,mBAAmB,EAAE,GAAG,IAAI,CAAC;IAEnC,8FAA8F;IAC9F,IAAI,OAAO,mBAAmB,KAAK,WAAW,EAAE;QAC9C,MAAM,cAAc,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAC9C,MAAM,iBAAiB,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CACjD,cAAI,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,aAAa,GAAG,EAAE,CAAC,CAC1D,CAAC;QACF,IAAI,4BAAkB,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,EAAE;YAC7D,mBAAmB,GAAG,KAAK,CAAC;SAC7B;KACF;IAED,MAAM,MAAM,GAAG,mCAAa,CAAC,WAAW,oBACnC,IAAI,IACP,mBAAmB,IACnB,CAAC;IAEH,qEAAqE;IACrE,yFAAyF;IACzF,aAAa;IACb,mHAAmH;IACnH,gIAAgI;IAChI,MAAM,WAAW,GAAG,gBAAgB,CAAC,MAAM,CAAC,MAAO,CAAC,KAAK,CAAC,CAAC;IAC3D,sLAAsL;IACtL,MAAM,WAAW,GAAG,WAAW,CAAC,OAAsC,CAAC;IACvE,IAAI,kBAAkB,CAAC,SAAS,EAAE;QAChC,kBAAkB,CAAC,SAAS,GAAI,kBAAkB,CAAC,SAAiB,CAAC,GAAG,CAAC,CAAC,QAAa,EAAE,EAAE;YACzF,IAAI,OAAO,QAAQ,KAAK,UAAU;gBAAE,OAAO,QAAQ,CAAC;YACpD,OAAO,CAAC,GAAQ,EAAE,GAAQ,EAAE,EAAO,EAAE,EAAE;gBACrC,MAAM,OAAO,GAAG,cAAI,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;gBAC/C,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;YAC9D,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;KACJ;IAED,MAAM,WAAW,GAAG,uBAAK,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;IAEtD,IAAI,WAAW,CAAC,IAAI,EAAE;QACpB,SAAS,CAAC,WAAW,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;KACjD;IAED,OAAO,WAAW,CAAC;AACrB,CAAC;AAxDD,iCAwDC","sourcesContent":["import { RuleSetRule, Configuration } from 'webpack';\nimport merge from 'webpack-merge';\nimport path from 'path';\n\nimport { Arguments, DevConfiguration, InputEnvironment, Environment } from './types';\nimport * as Diagnosis from './utils/Diagnosis';\nimport { validateEnvironment } from './utils/validate';\nimport { findLoader, rulesMatchAnyFiles } from './utils/loaders';\nimport webpackConfig from './webpack.config.unimodules';\n\nfunction _findBabelLoader(rules: RuleSetRule[]): RuleSetRule {\n  const loader = findLoader('babel-loader', rules);\n  if (!loader)\n    throw new Error(\n      'Cannot find `babel-loader` generated by `webpack.config.unimodules`. It is likely an Expo issue. Please create a new issue at https://github.com/expo/expo-cli.'\n    );\n  return loader;\n}\n\n// Wrap your existing webpack config with support for Unimodules.\n// ex: Storybook `({ config }) => withUnimodules(config)`\nexport default function withUnimodules(\n  inputWebpackConfig: DevConfiguration | Configuration = {},\n  env: InputEnvironment = {},\n  argv: Arguments = {}\n): DevConfiguration | Configuration {\n  // @ts-ignore: We should attempt to use the project root that the other config is already using (used for Gatsby support).\n  env.projectRoot = env.projectRoot || inputWebpackConfig.context;\n\n  // Attempt to use the input webpack config mode\n  env.mode = env.mode || inputWebpackConfig.mode;\n\n  const environment: Environment = validateEnvironment(env);\n\n  let { supportsFontLoading } = argv;\n\n  // If the args don't specify this then we'll check if the input already supports font loading.\n  if (typeof supportsFontLoading === 'undefined') {\n    const supportedFonts = ['ttf', 'otf', 'woff'];\n    const testFontFileNames = supportedFonts.map(ext =>\n      path.resolve(environment.projectRoot, `cool-font.${ext}`)\n    );\n    if (rulesMatchAnyFiles(inputWebpackConfig, testFontFileNames)) {\n      supportsFontLoading = false;\n    }\n  }\n\n  const config = webpackConfig(environment, {\n    ...argv,\n    supportsFontLoading,\n  });\n\n  // We have to transpile these modules and make them not external too.\n  // We have to do this because next.js by default externals all `node_modules`'s js files.\n  // Reference:\n  // https://github.com/martpie/next-transpile-modules/blob/77450a0c0307e4b650d7acfbc18641ef9465f0da/index.js#L48-L62\n  // https://github.com/zeit/next.js/blob/0b496a45e85f3c9aa3cf2e77eef10888be5884fc/packages/next/build/webpack-config.ts#L185-L258\n  const babelLoader = _findBabelLoader(config.module!.rules);\n  // `include` function is from https://github.com/expo/expo-cli/blob/3933f3d6ba65bffec2738ece71b62f2c284bd6e4/packages/webpack-config/webpack/loaders/createBabelLoaderAsync.js#L76-L96\n  const includeFunc = babelLoader.include as ((path: string) => boolean);\n  if (inputWebpackConfig.externals) {\n    inputWebpackConfig.externals = (inputWebpackConfig.externals as any).map((external: any) => {\n      if (typeof external !== 'function') return external;\n      return (ctx: any, req: any, cb: any) => {\n        const relPath = path.join('node_modules', req);\n        return includeFunc(relPath) ? cb() : external(ctx, req, cb);\n      };\n    });\n  }\n\n  const mixedConfig = merge(config, inputWebpackConfig);\n\n  if (environment.info) {\n    Diagnosis.reportAsync(mixedConfig, environment);\n  }\n\n  return mixedConfig;\n}\n"]}